// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat_group_message.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGroupMessage = `-- name: CreateGroupMessage :one
INSERT INTO chat_group_message (
  chat_id, chat_group_id, sender_id
) VALUES (
  $1, $2, $3
)
RETURNING chat_id, chat_group_id, sender_id, send_at
`

type CreateGroupMessageParams struct {
	ChatID      uuid.UUID
	ChatGroupID uuid.UUID
	SenderID    int32
}

func (q *Queries) CreateGroupMessage(ctx context.Context, arg CreateGroupMessageParams) (ChatGroupMessage, error) {
	row := q.db.QueryRowContext(ctx, createGroupMessage, arg.ChatID, arg.ChatGroupID, arg.SenderID)
	var i ChatGroupMessage
	err := row.Scan(
		&i.ChatID,
		&i.ChatGroupID,
		&i.SenderID,
		&i.SendAt,
	)
	return i, err
}

const deleteGroupMessage = `-- name: DeleteGroupMessage :exec
DELETE FROM chat_group_message
WHERE chat_id = $1
`

func (q *Queries) DeleteGroupMessage(ctx context.Context, chatID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMessage, chatID)
	return err
}

const getGroupMessages = `-- name: GetGroupMessages :many
SELECT c.id, c.content, c.type, c.created_at, c.user_id, gm.send_at, gm.sender_id
FROM chat_group_message gm
JOIN chat c ON c.id = gm.chat_id
WHERE gm.chat_group_id = $1
ORDER BY gm.send_at
`

type GetGroupMessagesRow struct {
	ID        uuid.UUID
	Content   string
	Type      interface{}
	CreatedAt sql.NullTime
	UserID    sql.NullInt32
	SendAt    sql.NullTime
	SenderID  int32
}

func (q *Queries) GetGroupMessages(ctx context.Context, chatGroupID uuid.UUID) ([]GetGroupMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMessages, chatGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupMessagesRow
	for rows.Next() {
		var i GetGroupMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
			&i.SendAt,
			&i.SenderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewGroupMessages = `-- name: GetNewGroupMessages :many
SELECT c.id, c.content, c.type, c.created_at, c.user_id, gm.send_at, gm.sender_id
FROM chat_group_message gm
JOIN chat c ON c.id = gm.chat_id
WHERE gm.chat_group_id = $1 AND gm.send_at > $2
ORDER BY gm.send_at
`

type GetNewGroupMessagesParams struct {
	ChatGroupID uuid.UUID
	SendAt      sql.NullTime
}

type GetNewGroupMessagesRow struct {
	ID        uuid.UUID
	Content   string
	Type      interface{}
	CreatedAt sql.NullTime
	UserID    sql.NullInt32
	SendAt    sql.NullTime
	SenderID  int32
}

func (q *Queries) GetNewGroupMessages(ctx context.Context, arg GetNewGroupMessagesParams) ([]GetNewGroupMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getNewGroupMessages, arg.ChatGroupID, arg.SendAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNewGroupMessagesRow
	for rows.Next() {
		var i GetNewGroupMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
			&i.SendAt,
			&i.SenderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedGroupMessages = `-- name: GetPaginatedGroupMessages :many
SELECT c.id, c.content, c.type, c.created_at, c.user_id, gm.send_at, gm.sender_id
FROM chat_group_message gm
JOIN chat c ON c.id = gm.chat_id
WHERE gm.chat_group_id = $1
ORDER BY gm.send_at DESC
LIMIT $2 OFFSET $3
`

type GetPaginatedGroupMessagesParams struct {
	ChatGroupID uuid.UUID
	Limit       int32
	Offset      int32
}

type GetPaginatedGroupMessagesRow struct {
	ID        uuid.UUID
	Content   string
	Type      interface{}
	CreatedAt sql.NullTime
	UserID    sql.NullInt32
	SendAt    sql.NullTime
	SenderID  int32
}

func (q *Queries) GetPaginatedGroupMessages(ctx context.Context, arg GetPaginatedGroupMessagesParams) ([]GetPaginatedGroupMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedGroupMessages, arg.ChatGroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedGroupMessagesRow
	for rows.Next() {
		var i GetPaginatedGroupMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
			&i.SendAt,
			&i.SenderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupMessageContent = `-- name: UpdateGroupMessageContent :exec
UPDATE chat
SET content = $2
WHERE id = $1
`

type UpdateGroupMessageContentParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) UpdateGroupMessageContent(ctx context.Context, arg UpdateGroupMessageContentParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupMessageContent, arg.ID, arg.Content)
	return err
}
