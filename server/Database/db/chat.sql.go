// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chat (id, user_id, content, type)
VALUES ($1, $2, $3, $4)
RETURNING id, content, type, created_at, user_id
`

type CreateChatParams struct {
	ID      uuid.UUID
	UserID  sql.NullInt32
	Content string
	Type    interface{}
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.Type,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM chat
WHERE id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChatByID = `-- name: GetChatByID :one
SELECT id, content, type, created_at, user_id FROM chat
WHERE id = $1
`

func (q *Queries) GetChatByID(ctx context.Context, id uuid.UUID) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChatByID, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getChatsByUserID = `-- name: GetChatsByUserID :many
SELECT id, content, type, created_at, user_id FROM chat
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetChatsByUserID(ctx context.Context, userID sql.NullInt32) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatContent = `-- name: UpdateChatContent :one
UPDATE chat
SET content = $2
WHERE id = $1
RETURNING id, content, type, created_at, user_id
`

type UpdateChatContentParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) UpdateChatContent(ctx context.Context, arg UpdateChatContentParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, updateChatContent, arg.ID, arg.Content)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
