// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: personal_message.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPersonalMessage = `-- name: CreatePersonalMessage :one
INSERT INTO personal_message (chat_id , sender_id , receiver_id)
VALUES ($1 , $2 , $3) 
RETURNING chat_id, sender_id, receiver_id, is_seen, send_at
`

type CreatePersonalMessageParams struct {
	ChatID     uuid.UUID
	SenderID   int32
	ReceiverID int32
}

func (q *Queries) CreatePersonalMessage(ctx context.Context, arg CreatePersonalMessageParams) (PersonalMessage, error) {
	row := q.db.QueryRowContext(ctx, createPersonalMessage, arg.ChatID, arg.SenderID, arg.ReceiverID)
	var i PersonalMessage
	err := row.Scan(
		&i.ChatID,
		&i.SenderID,
		&i.ReceiverID,
		&i.IsSeen,
		&i.SendAt,
	)
	return i, err
}

const deletePersonalMessage = `-- name: DeletePersonalMessage :exec
DELETE FROM personal_message
WHERE chat_id = $1
`

func (q *Queries) DeletePersonalMessage(ctx context.Context, chatID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePersonalMessage, chatID)
	return err
}

const editMessageContent = `-- name: EditMessageContent :exec
UPDATE chat
SET content = $2
WHERE id = $1
`

type EditMessageContentParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) EditMessageContent(ctx context.Context, arg EditMessageContentParams) error {
	_, err := q.db.ExecContext(ctx, editMessageContent, arg.ID, arg.Content)
	return err
}

const getMessagesBetweenTwoUsers = `-- name: GetMessagesBetweenTwoUsers :many
SELECT c.id, c.content, c.type, c.created_at, c.user_id, pm.is_seen, pm.send_at
FROM personal_message pm
JOIN chat c ON c.id = pm.chat_id
WHERE (pm.sender_id = $1 AND pm.receiver_id = $2)
   OR (pm.sender_id = $2 AND pm.receiver_id = $1)
ORDER BY pm.send_at
`

type GetMessagesBetweenTwoUsersParams struct {
	SenderID   int32
	ReceiverID int32
}

type GetMessagesBetweenTwoUsersRow struct {
	ID        uuid.UUID
	Content   string
	Type      interface{}
	CreatedAt sql.NullTime
	UserID    sql.NullInt32
	IsSeen    bool
	SendAt    sql.NullTime
}

func (q *Queries) GetMessagesBetweenTwoUsers(ctx context.Context, arg GetMessagesBetweenTwoUsersParams) ([]GetMessagesBetweenTwoUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesBetweenTwoUsers, arg.SenderID, arg.ReceiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesBetweenTwoUsersRow
	for rows.Next() {
		var i GetMessagesBetweenTwoUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
			&i.IsSeen,
			&i.SendAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnseenMessage = `-- name: GetUnseenMessage :many
SELECT c.id, c.content, c.type, c.created_at, c.user_id, pm.send_at
FROM personal_message pm
JOIN chat c ON c.id = pm.chat_id
WHERE pm.receiver_id = $1 AND pm.is_seen = FALSE
ORDER BY pm.send_at
`

type GetUnseenMessageRow struct {
	ID        uuid.UUID
	Content   string
	Type      interface{}
	CreatedAt sql.NullTime
	UserID    sql.NullInt32
	SendAt    sql.NullTime
}

func (q *Queries) GetUnseenMessage(ctx context.Context, receiverID int32) ([]GetUnseenMessageRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnseenMessage, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnseenMessageRow
	for rows.Next() {
		var i GetUnseenMessageRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UserID,
			&i.SendAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageAsSeen = `-- name: MarkMessageAsSeen :exec
UPDATE personal_message
SET is_seen = TRUE
WHERE chat_id = $1
`

func (q *Queries) MarkMessageAsSeen(ctx context.Context, chatID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markMessageAsSeen, chatID)
	return err
}
