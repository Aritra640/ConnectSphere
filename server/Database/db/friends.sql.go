// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friends.sql

package db

import (
	"context"
)

const addUserFriend = `-- name: AddUserFriend :exec
INSERT INTO friends (user_id, friend_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddUserFriendParams struct {
	UserID   int32
	FriendID int32
}

func (q *Queries) AddUserFriend(ctx context.Context, arg AddUserFriendParams) error {
	_, err := q.db.ExecContext(ctx, addUserFriend, arg.UserID, arg.FriendID)
	return err
}

const adduserFriendsBothWays = `-- name: AdduserFriendsBothWays :exec
INSERT INTO friends (user_id, friend_id)
VALUES 
  ($1, $2),
  ($2, $1)
ON CONFLICT DO NOTHING
`

type AdduserFriendsBothWaysParams struct {
	UserID   int32
	FriendID int32
}

func (q *Queries) AdduserFriendsBothWays(ctx context.Context, arg AdduserFriendsBothWaysParams) error {
	_, err := q.db.ExecContext(ctx, adduserFriendsBothWays, arg.UserID, arg.FriendID)
	return err
}

const areFriends = `-- name: AreFriends :one
SELECT EXISTS (
  SELECT 1 FROM friends
  WHERE user_id = $1 AND friend_id = $2
) AS are_friends
`

type AreFriendsParams struct {
	UserID   int32
	FriendID int32
}

func (q *Queries) AreFriends(ctx context.Context, arg AreFriendsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, areFriends, arg.UserID, arg.FriendID)
	var are_friends bool
	err := row.Scan(&are_friends)
	return are_friends, err
}

const getUserFriends = `-- name: GetUserFriends :many
SELECT u.id, u.username, u.email, u.password_hashed, u.created_at
FROM users u
JOIN friends f ON u.id = f.friend_id
WHERE f.user_id = $1
`

func (q *Queries) GetUserFriends(ctx context.Context, userID int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserFriends, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHashed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
