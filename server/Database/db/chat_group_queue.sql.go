// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat_group_queue.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const acceptGroupJoinRequest = `-- name: AcceptGroupJoinRequest :exec
UPDATE chat_group_queue
SET is_accepted = TRUE
WHERE user_id = $1 AND chat_group_id = $2
`

type AcceptGroupJoinRequestParams struct {
	UserID      int32
	ChatGroupID uuid.UUID
}

func (q *Queries) AcceptGroupJoinRequest(ctx context.Context, arg AcceptGroupJoinRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptGroupJoinRequest, arg.UserID, arg.ChatGroupID)
	return err
}

const addGroupJoinRequest = `-- name: AddGroupJoinRequest :exec
INSERT INTO chat_group_queue (user_id, chat_group_id) 
VALUES ($1, $2)
`

type AddGroupJoinRequestParams struct {
	UserID      int32
	ChatGroupID uuid.UUID
}

func (q *Queries) AddGroupJoinRequest(ctx context.Context, arg AddGroupJoinRequestParams) error {
	_, err := q.db.ExecContext(ctx, addGroupJoinRequest, arg.UserID, arg.ChatGroupID)
	return err
}

const deleteChatGroupRequest = `-- name: DeleteChatGroupRequest :exec
DELETE FROM chat_group_queue
WHERE user_id = $1 AND chat_group_id = $2
`

type DeleteChatGroupRequestParams struct {
	UserID      int32
	ChatGroupID uuid.UUID
}

func (q *Queries) DeleteChatGroupRequest(ctx context.Context, arg DeleteChatGroupRequestParams) error {
	_, err := q.db.ExecContext(ctx, deleteChatGroupRequest, arg.UserID, arg.ChatGroupID)
	return err
}

const getGroupRequest = `-- name: GetGroupRequest :one
SELECT user_id, chat_group_id, is_accepted, requested_at FROM chat_group_queue
WHERE user_id = $1 AND chat_group_id = $2
`

type GetGroupRequestParams struct {
	UserID      int32
	ChatGroupID uuid.UUID
}

func (q *Queries) GetGroupRequest(ctx context.Context, arg GetGroupRequestParams) (ChatGroupQueue, error) {
	row := q.db.QueryRowContext(ctx, getGroupRequest, arg.UserID, arg.ChatGroupID)
	var i ChatGroupQueue
	err := row.Scan(
		&i.UserID,
		&i.ChatGroupID,
		&i.IsAccepted,
		&i.RequestedAt,
	)
	return i, err
}

const getPendingChatGroupRequestsForGroup = `-- name: GetPendingChatGroupRequestsForGroup :many
SELECT user_id, chat_group_id, is_accepted, requested_at FROM chat_group_queue
WHERE chat_group_id = $1 AND is_accepted = FALSE
`

func (q *Queries) GetPendingChatGroupRequestsForGroup(ctx context.Context, chatGroupID uuid.UUID) ([]ChatGroupQueue, error) {
	rows, err := q.db.QueryContext(ctx, getPendingChatGroupRequestsForGroup, chatGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatGroupQueue
	for rows.Next() {
		var i ChatGroupQueue
		if err := rows.Scan(
			&i.UserID,
			&i.ChatGroupID,
			&i.IsAccepted,
			&i.RequestedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersAllGroupRequest = `-- name: ListUsersAllGroupRequest :many
SELECT user_id, chat_group_id, is_accepted, requested_at FROM chat_group_queue
WHERE user_id = $1
`

func (q *Queries) ListUsersAllGroupRequest(ctx context.Context, userID int32) ([]ChatGroupQueue, error) {
	rows, err := q.db.QueryContext(ctx, listUsersAllGroupRequest, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatGroupQueue
	for rows.Next() {
		var i ChatGroupQueue
		if err := rows.Scan(
			&i.UserID,
			&i.ChatGroupID,
			&i.IsAccepted,
			&i.RequestedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
